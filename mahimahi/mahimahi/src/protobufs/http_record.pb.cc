// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MahimahiProtobufs {

namespace {

const ::google::protobuf::Descriptor* HTTPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HTTPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HTTPHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HTTPHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestResponse_Scheme_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_5frecord_2eproto() {
  protobuf_AddDesc_http_5frecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http_record.proto");
  GOOGLE_CHECK(file != NULL);
  HTTPMessage_descriptor_ = file->message_type(0);
  static const int HTTPMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, first_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, body_),
  };
  HTTPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HTTPMessage_descriptor_,
      HTTPMessage::default_instance_,
      HTTPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HTTPMessage));
  HTTPHeader_descriptor_ = file->message_type(1);
  static const int HTTPHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, value_),
  };
  HTTPHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HTTPHeader_descriptor_,
      HTTPHeader::default_instance_,
      HTTPHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HTTPHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HTTPHeader));
  RequestResponse_descriptor_ = file->message_type(2);
  static const int RequestResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, response_),
  };
  RequestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestResponse_descriptor_,
      RequestResponse::default_instance_,
      RequestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestResponse));
  RequestResponse_Scheme_descriptor_ = RequestResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_5frecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HTTPMessage_descriptor_, &HTTPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HTTPHeader_descriptor_, &HTTPHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestResponse_descriptor_, &RequestResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_http_5frecord_2eproto() {
  delete HTTPMessage::default_instance_;
  delete HTTPMessage_reflection_;
  delete HTTPHeader::default_instance_;
  delete HTTPHeader_reflection_;
  delete RequestResponse::default_instance_;
  delete RequestResponse_reflection_;
}

void protobuf_AddDesc_http_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021http_record.proto\022\021MahimahiProtobufs\"^"
    "\n\013HTTPMessage\022\022\n\nfirst_line\030\001 \001(\014\022-\n\006hea"
    "der\030\002 \003(\0132\035.MahimahiProtobufs.HTTPHeader"
    "\022\014\n\004body\030\003 \001(\014\"(\n\nHTTPHeader\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\014\"\350\001\n\017RequestResponse\022\n\n\002"
    "ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\0229\n\006scheme\030\003 \001(\0162)"
    ".MahimahiProtobufs.RequestResponse.Schem"
    "e\022/\n\007request\030\004 \001(\0132\036.MahimahiProtobufs.H"
    "TTPMessage\0220\n\010response\030\005 \001(\0132\036.MahimahiP"
    "rotobufs.HTTPMessage\"\035\n\006Scheme\022\010\n\004HTTP\020\001"
    "\022\t\n\005HTTPS\020\002", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http_record.proto", &protobuf_RegisterTypes);
  HTTPMessage::default_instance_ = new HTTPMessage();
  HTTPHeader::default_instance_ = new HTTPHeader();
  RequestResponse::default_instance_ = new RequestResponse();
  HTTPMessage::default_instance_->InitAsDefaultInstance();
  HTTPHeader::default_instance_->InitAsDefaultInstance();
  RequestResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_5frecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_5frecord_2eproto {
  StaticDescriptorInitializer_http_5frecord_2eproto() {
    protobuf_AddDesc_http_5frecord_2eproto();
  }
} static_descriptor_initializer_http_5frecord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HTTPMessage::kFirstLineFieldNumber;
const int HTTPMessage::kHeaderFieldNumber;
const int HTTPMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

HTTPMessage::HTTPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.HTTPMessage)
}

void HTTPMessage::InitAsDefaultInstance() {
}

HTTPMessage::HTTPMessage(const HTTPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.HTTPMessage)
}

void HTTPMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  first_line_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HTTPMessage::~HTTPMessage() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.HTTPMessage)
  SharedDtor();
}

void HTTPMessage::SharedDtor() {
  if (first_line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_line_;
  }
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void HTTPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HTTPMessage_descriptor_;
}

const HTTPMessage& HTTPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

HTTPMessage* HTTPMessage::default_instance_ = NULL;

HTTPMessage* HTTPMessage::New() const {
  return new HTTPMessage;
}

void HTTPMessage::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_first_line()) {
      if (first_line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_line_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  header_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HTTPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.HTTPMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes first_line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // repeated .MahimahiProtobufs.HTTPHeader header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header;
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.HTTPMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.HTTPMessage)
  return false;
#undef DO_
}

void HTTPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.HTTPMessage)
  // optional bytes first_line = 1;
  if (has_first_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->first_line(), output);
  }

  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  for (int i = 0; i < this->header_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(i), output);
  }

  // optional bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.HTTPMessage)
}

::google::protobuf::uint8* HTTPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.HTTPMessage)
  // optional bytes first_line = 1;
  if (has_first_line()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->first_line(), target);
  }

  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  for (int i = 0; i < this->header_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(i), target);
  }

  // optional bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.HTTPMessage)
  return target;
}

int HTTPMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes first_line = 1;
    if (has_first_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first_line());
    }

    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  // repeated .MahimahiProtobufs.HTTPHeader header = 2;
  total_size += 1 * this->header_size();
  for (int i = 0; i < this->header_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HTTPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HTTPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HTTPMessage::MergeFrom(const HTTPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  header_.MergeFrom(from.header_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_line()) {
      set_first_line(from.first_line());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HTTPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPMessage::CopyFrom(const HTTPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPMessage::IsInitialized() const {

  return true;
}

void HTTPMessage::Swap(HTTPMessage* other) {
  if (other != this) {
    std::swap(first_line_, other->first_line_);
    header_.Swap(&other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HTTPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HTTPMessage_descriptor_;
  metadata.reflection = HTTPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HTTPHeader::kKeyFieldNumber;
const int HTTPHeader::kValueFieldNumber;
#endif  // !_MSC_VER

HTTPHeader::HTTPHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.HTTPHeader)
}

void HTTPHeader::InitAsDefaultInstance() {
}

HTTPHeader::HTTPHeader(const HTTPHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.HTTPHeader)
}

void HTTPHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HTTPHeader::~HTTPHeader() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.HTTPHeader)
  SharedDtor();
}

void HTTPHeader::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void HTTPHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HTTPHeader_descriptor_;
}

const HTTPHeader& HTTPHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

HTTPHeader* HTTPHeader::default_instance_ = NULL;

HTTPHeader* HTTPHeader::New() const {
  return new HTTPHeader;
}

void HTTPHeader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HTTPHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.HTTPHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.HTTPHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.HTTPHeader)
  return false;
#undef DO_
}

void HTTPHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.HTTPHeader)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.HTTPHeader)
}

::google::protobuf::uint8* HTTPHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.HTTPHeader)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.HTTPHeader)
  return target;
}

int HTTPHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HTTPHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HTTPHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HTTPHeader::MergeFrom(const HTTPHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HTTPHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPHeader::CopyFrom(const HTTPHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPHeader::IsInitialized() const {

  return true;
}

void HTTPHeader::Swap(HTTPHeader* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HTTPHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HTTPHeader_descriptor_;
  metadata.reflection = HTTPHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestResponse_Scheme_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResponse_Scheme_descriptor_;
}
bool RequestResponse_Scheme_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestResponse_Scheme RequestResponse::HTTP;
const RequestResponse_Scheme RequestResponse::HTTPS;
const RequestResponse_Scheme RequestResponse::Scheme_MIN;
const RequestResponse_Scheme RequestResponse::Scheme_MAX;
const int RequestResponse::Scheme_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestResponse::kIpFieldNumber;
const int RequestResponse::kPortFieldNumber;
const int RequestResponse::kSchemeFieldNumber;
const int RequestResponse::kRequestFieldNumber;
const int RequestResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

RequestResponse::RequestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MahimahiProtobufs.RequestResponse)
}

void RequestResponse::InitAsDefaultInstance() {
  request_ = const_cast< ::MahimahiProtobufs::HTTPMessage*>(&::MahimahiProtobufs::HTTPMessage::default_instance());
  response_ = const_cast< ::MahimahiProtobufs::HTTPMessage*>(&::MahimahiProtobufs::HTTPMessage::default_instance());
}

RequestResponse::RequestResponse(const RequestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MahimahiProtobufs.RequestResponse)
}

void RequestResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  scheme_ = 1;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:MahimahiProtobufs.RequestResponse)
  SharedDtor();
}

void RequestResponse::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void RequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResponse_descriptor_;
}

const RequestResponse& RequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_5frecord_2eproto();
  return *default_instance_;
}

RequestResponse* RequestResponse::default_instance_ = NULL;

RequestResponse* RequestResponse::New() const {
  return new RequestResponse;
}

void RequestResponse::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    scheme_ = 1;
    if (has_request()) {
      if (request_ != NULL) request_->::MahimahiProtobufs::HTTPMessage::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::MahimahiProtobufs::HTTPMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MahimahiProtobufs.RequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scheme;
        break;
      }

      // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
      case 3: {
        if (tag == 24) {
         parse_scheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MahimahiProtobufs::RequestResponse_Scheme_IsValid(value)) {
            set_scheme(static_cast< ::MahimahiProtobufs::RequestResponse_Scheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // optional .MahimahiProtobufs.HTTPMessage request = 4;
      case 4: {
        if (tag == 34) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }

      // optional .MahimahiProtobufs.HTTPMessage response = 5;
      case 5: {
        if (tag == 42) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MahimahiProtobufs.RequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MahimahiProtobufs.RequestResponse)
  return false;
#undef DO_
}

void RequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MahimahiProtobufs.RequestResponse)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->scheme(), output);
  }

  // optional .MahimahiProtobufs.HTTPMessage request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }

  // optional .MahimahiProtobufs.HTTPMessage response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MahimahiProtobufs.RequestResponse)
}

::google::protobuf::uint8* RequestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MahimahiProtobufs.RequestResponse)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
  if (has_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->scheme(), target);
  }

  // optional .MahimahiProtobufs.HTTPMessage request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }

  // optional .MahimahiProtobufs.HTTPMessage response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MahimahiProtobufs.RequestResponse)
  return target;
}

int RequestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .MahimahiProtobufs.RequestResponse.Scheme scheme = 3;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scheme());
    }

    // optional .MahimahiProtobufs.HTTPMessage request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .MahimahiProtobufs.HTTPMessage response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestResponse::MergeFrom(const RequestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_request()) {
      mutable_request()->::MahimahiProtobufs::HTTPMessage::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::MahimahiProtobufs::HTTPMessage::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResponse::IsInitialized() const {

  return true;
}

void RequestResponse::Swap(RequestResponse* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(scheme_, other->scheme_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResponse_descriptor_;
  metadata.reflection = RequestResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MahimahiProtobufs

// @@protoc_insertion_point(global_scope)
